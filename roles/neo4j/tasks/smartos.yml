# Written for Neo4j v3.4.9 at 2018-11-05
---
# Ensure that OpenJDK8 is present
- name: ensure that OpenJDK8 is present
  pkgin:
    name: openjdk8

# Ensure that the Neo4j user, group and project are present
- name: ensure presence of neo4j group
  group:
    gid: 814
    name: neo4j

- name: ensure presence of neo4j user
  user:
    uid: 814
    name: neo4j
    group: neo4j
    home: /nonexistent
    create_home: false
    shell: /usr/bin/false
    comment: Neo4j daemon user

- name: ensure precence of neo4j project
  command: projadd -U neo4j -G neo4j -c "Neo4j server" -K "process.max-file-descriptor=(basic,65536,deny)" neo4j
  ignore_errors: true

# Ensure that a dataset has been created for neo4j
- name: 'ensure that neo4j ZFS dataset exists at {{ neo4j_data_path }}'
  when: delegated_dataset is succeeded
  zfs:
    name: '{{ ansible_mounts.0.device }}/data/neo4j'
    state: present
    extra_zfs_properties:
      mountpoint: '{{ neo4j_data_path }}'
      recordsize: 16k

# Ensure that all root owned directories exist and have the proper permissions
- name: 'ensure that root owned Neo4j directories exist and have the proper permissions'
  file:
    path: '{{ item }}'
    state: directory
    owner: root
    group: root
    mode: 0755
  with_items:
  - '{{ neo4j_path }}'
  - '{{ neo4j_conf_path }}'

# Download and install Neo4j
- name: 'ensure that Neo4j {{ neo4j_version }} has been downloaded'
  get_url:
    url: 'https://neo4j.com/artifact.php?name=neo4j-community-{{ neo4j_version }}-unix.tar.gz'
    dest: '/tmp/neo4j-community-{{ neo4j_version }}-unix.tar.gz'
    checksum: '{{ checksum[neo4j_version] }}'

- name: 'ensure that Neo4j {{ neo4j_version }} has been installed'
  unarchive:
    src: '/tmp/neo4j-community-{{ neo4j_version }}-unix.tar.gz'
    dest: '{{ neo4j_path }}'
    owner: root
    group: root
    mode: 0755
    remote_src: true
    extra_opts:
    - '--strip-components=1'

# Remove unnecessary Neo4j files
- name: ensure that unnecessary files are absent
  file:
    path: '{{ neo4j_path }}/{{ item }}'
    state: absent
  with_items:
  - LICENSE.txt
  - LICENSES.txt
  - NOTICE.txt
  - README.txt
  - UPGRADE.txt
  - data
  - conf

# Symlink the conf and data directories
- name: 'ensure presence of {{ neo4j_path }}/conf -> {{ neo4j_conf_path }} symlink'
  file:
    src: '{{ neo4j_conf_path }}'
    path: '{{ neo4j_path }}/conf'
    state: link
    force: true

- name: 'ensure presence of {{ neo4j_path }}/data -> {{ neo4j_data_path }} symlink'
  file:
    src: '{{ neo4j_data_path }}'
    path: '{{ neo4j_path }}/data'
    state: link
    force: true

# Ensure that all Neo4j owned directories exist and have the proper permissions
- name: 'ensure that neo4j owned directories exist and have the proper permissions'
  file:
    path: '{{ item }}'
    state: directory
    owner: neo4j
    group: neo4j
    mode: 0700
  with_items:
  - '{{ neo4j_data_path }}'
  - '{{ neo4j_path }}/certificates'
  - '{{ neo4j_path }}/logs'
  - '{{ neo4j_path }}/run'

# Configure Neo4j
- name: ensure that Neo4j is configured
  template:
    src: neo4j.conf
    dest: /opt/local/etc/neo4j/neo4j.conf
    owner: root
    group: root
    mode: 0644
  notify: restart neo4j

# Configure SMF to handle Neo4j
- name: ensure presence of Neo4j SMF manifest
  template:
    src: neo4j-smf.xml
    dest: /tmp/neo4j-smf.xml
    owner: root
    group: root
    mode: 0644

# Import and enable Neo4j
- name: ensure that Neo4j SMF manifest has been imported
  command: svccfg import /tmp/neo4j-smf.xml

- name: ensure that Neo4j is enabled
  service:
    name: 'svc:/neo4j:default'
    enabled: true
